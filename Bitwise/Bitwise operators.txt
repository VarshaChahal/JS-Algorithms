1. Left Shift Operator: <<
This operator shifts the first operand the specified number of bits to the left
operation in base 10 equals: x * 2 ** y
ex: 9 << 3 => 72 as 9 * (2 ** 3) = 9 * (8) = 72

2. 2's complement:
it is calculated by inverting all the bits of a number and adding 1. This results in the negative of the positive integer.
Ex: 9 => 00000000000000000000000000001001
   -9 => 11111111111111111111111111110110+1 = 11111111111111111111111111110111

3. Right Shift operator: >>
This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. 
Copies of the leftmost bit are shifted in from the left. 
Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change.
Ex: 9 => 00000000000000000000000000001001
    9 >> 2 => 00000000000000000000000000000010 => 2
    -9 => 11111111111111111111111111110111
    -9 >> 2 => 11111111111111111111111111111101 => -3 ,Since copies of leftmost bits is copied 2 times, the negative sign is maintained.

